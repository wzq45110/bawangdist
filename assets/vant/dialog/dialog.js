"use strict";

var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var queue = [];
function getContext() {
    var pages = getCurrentPages();
    return pages[pages.length - 1];
}
var Dialog = function Dialog(options) {
    options = __assign(__assign({}, Dialog.currentOptions), options);
    return new Promise(function (resolve, reject) {
        var context = options.context || getContext();
        var dialog = context.selectComponent(options.selector);
        delete options.context;
        delete options.selector;
        if (dialog) {
            dialog.setData(__assign({ onCancel: reject, onConfirm: resolve }, options));
            queue.push(dialog);
        } else {
            console.warn('未找到 van-dialog 节点，请确认 selector 及 context 是否正确');
        }
    });
};
Dialog.defaultOptions = {
    show: true,
    title: '',
    message: '',
    zIndex: 100,
    overlay: true,
    className: '',
    customStyle: '',
    asyncClose: false,
    messageAlign: '',
    transition: 'scale',
    selector: '#van-dialog',
    confirmButtonText: '确认',
    cancelButtonText: '取消',
    showConfirmButton: true,
    showCancelButton: false,
    closeOnClickOverlay: false,
    confirmButtonOpenType: ''
};
Dialog.alert = Dialog;
Dialog.confirm = function (options) {
    return Dialog(__assign({ showCancelButton: true }, options));
};
Dialog.close = function () {
    queue.forEach(function (dialog) {
        dialog.close();
    });
    queue = [];
};
Dialog.stopLoading = function () {
    queue.forEach(function (dialog) {
        dialog.stopLoading();
    });
};
Dialog.setDefaultOptions = function (options) {
    Object.assign(Dialog.currentOptions, options);
};
Dialog.resetDefaultOptions = function () {
    Dialog.currentOptions = __assign({}, Dialog.defaultOptions);
};
Dialog.resetDefaultOptions();
exports.default = Dialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpYWxvZy5qcyJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsIk9iamVjdCIsImFzc2lnbiIsInQiLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXVlIiwiZ2V0Q29udGV4dCIsInBhZ2VzIiwiZ2V0Q3VycmVudFBhZ2VzIiwiRGlhbG9nIiwib3B0aW9ucyIsImN1cnJlbnRPcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjb250ZXh0IiwiZGlhbG9nIiwic2VsZWN0Q29tcG9uZW50Iiwic2VsZWN0b3IiLCJzZXREYXRhIiwib25DYW5jZWwiLCJvbkNvbmZpcm0iLCJwdXNoIiwiY29uc29sZSIsIndhcm4iLCJkZWZhdWx0T3B0aW9ucyIsInNob3ciLCJ0aXRsZSIsIm1lc3NhZ2UiLCJ6SW5kZXgiLCJvdmVybGF5IiwiY2xhc3NOYW1lIiwiY3VzdG9tU3R5bGUiLCJhc3luY0Nsb3NlIiwibWVzc2FnZUFsaWduIiwidHJhbnNpdGlvbiIsImNvbmZpcm1CdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uVGV4dCIsInNob3dDb25maXJtQnV0dG9uIiwic2hvd0NhbmNlbEJ1dHRvbiIsImNsb3NlT25DbGlja092ZXJsYXkiLCJjb25maXJtQnV0dG9uT3BlblR5cGUiLCJhbGVydCIsImNvbmZpcm0iLCJjbG9zZSIsImZvckVhY2giLCJzdG9wTG9hZGluZyIsInNldERlZmF1bHRPcHRpb25zIiwicmVzZXREZWZhdWx0T3B0aW9ucyIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFdBQVksYUFBUSxVQUFLQSxRQUFkLElBQTJCLFlBQVk7QUFDbERBLGVBQVdDLE9BQU9DLE1BQVAsSUFBaUIsVUFBU0MsQ0FBVCxFQUFZO0FBQ3BDLGFBQUssSUFBSUMsQ0FBSixFQUFP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O0FBS0FyQyxPQUFPc0MsaUJBQVAsR0FBMkIsVUFBVXJDLE9BQVYsRUFBbUI7QUFDMUNyQixXQUFPQyxNQUFQLENBQWNtQixPQUFPRSxjQUFyQixFQUFxQ0QsT0FBckM7QUFDSCxDQUZEO0FBR0FELE9BQU91QyxtQkFBUCxHQUE2QixZQUFZO0FBQ3JDdkMsV0FBT0UsY0FBUCxHQUF3QnZCLFNBQVMsRUFBVCxFQUFhcUIsT0FBT2dCLGNBQXBCLENBQXhCO0FBQ0gsQ0FGRDtBQUdBaEIsT0FBT3VDLG1CQUFQO0FBQ0E3QyxRQUFROEMsT0FBUixHQUFrQnhDLE1BQWxCIiwiZmlsZSI6ImRpYWxvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHF1ZXVlID0gW107XHJcbmZ1bmN0aW9uIGdldENvbnRleHQoKSB7XHJcbiAgICB2YXIgcGFnZXMgPSBnZXRDdXJyZW50UGFnZXMoKTtcclxuICAgIHJldHVybiBwYWdlc1twYWdlcy5sZW5ndGggLSAxXTtcclxufVxyXG52YXIgRGlhbG9nID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIG9wdGlvbnMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgRGlhbG9nLmN1cnJlbnRPcHRpb25zKSwgb3B0aW9ucyk7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0IHx8IGdldENvbnRleHQoKTtcclxuICAgICAgICB2YXIgZGlhbG9nID0gY29udGV4dC5zZWxlY3RDb21wb25lbnQob3B0aW9ucy5zZWxlY3Rvcik7XHJcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMuY29udGV4dDtcclxuICAgICAgICBkZWxldGUgb3B0aW9ucy5zZWxlY3RvcjtcclxuICAgICAgICBpZiAoZGlhbG9nKSB7XHJcbiAgICAgICAgICAgIGRpYWxvZy5zZXREYXRhKF9fYXNzaWduKHsgb25DYW5jZWw6IHJlamVjdCwgb25Db25maXJtOiByZXNvbHZlIH0sIG9wdGlvbnMpKTtcclxuICAgICAgICAgICAgcXVldWUucHVzaChkaWFsb2cpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCfmnKrmib7liLAgdmFuLWRpYWxvZyDoioLngrnvvIzor7fnoa7orqQgc2VsZWN0b3Ig5Y+KIGNvbnRleHQg5piv5ZCm5q2j56GuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcbkRpYWxvZy5kZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgIHNob3c6IHRydWUsXHJcbiAgICB0aXRsZTogJycsXHJcbiAgICBtZXNzYWdlOiAnJyxcclxuICAgIHpJbmRleDogMTAwLFxyXG4gICAgb3ZlcmxheTogdHJ1ZSxcclxuICAgIGNsYXNzTmFtZTogJycsXHJcbiAgICBjdXN0b21TdHlsZTogJycsXHJcbiAgICBhc3luY0Nsb3NlOiBmYWxzZSxcclxuICAgIG1lc3NhZ2VBbGlnbjogJycsXHJcbiAgICB0cmFuc2l0aW9uOiAnc2NhbGUnLFxyXG4gICAgc2VsZWN0b3I6ICcjdmFuLWRpYWxvZycsXHJcbiAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruiupCcsXHJcbiAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIJyxcclxuICAgIHNob3dDb25maXJtQnV0dG9uOiB0cnVlLFxyXG4gICAgc2hvd0NhbmNlbEJ1dHRvbjogZmFsc2UsXHJcbiAgICBjbG9zZU9uQ2xpY2tPdmVybGF5OiBmYWxzZSxcclxuICAgIGNvbmZpcm1CdXR0b25PcGVuVHlwZTogJydcclxufTtcclxuRGlhbG9nLmFsZXJ0ID0gRGlhbG9nO1xyXG5EaWFsb2cuY29uZmlybSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gRGlhbG9nKF9fYXNzaWduKHsgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSB9LCBvcHRpb25zKSk7XHJcbn07XHJcbkRpYWxvZy5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGRpYWxvZykge1xyXG4gICAgICAgIGRpYWxvZy5jbG9zZSgpO1xyXG4gICAgfSk7XHJcbiAgICBxdWV1ZSA9IFtdO1xyXG59O1xyXG5EaWFsb2cuc3RvcExvYWRpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBxdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChkaWFsb2cpIHtcclxuICAgICAgICBkaWFsb2cuc3RvcExvYWRpbmcoKTtcclxuICAgIH0pO1xyXG59O1xyXG5EaWFsb2cuc2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgT2JqZWN0LmFzc2lnbihEaWFsb2cuY3VycmVudE9wdGlvbnMsIG9wdGlvbnMpO1xyXG59O1xyXG5EaWFsb2cucmVzZXREZWZhdWx0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIERpYWxvZy5jdXJyZW50T3B0aW9ucyA9IF9fYXNzaWduKHt9LCBEaWFsb2cuZGVmYXVsdE9wdGlvbnMpO1xyXG59O1xyXG5EaWFsb2cucmVzZXREZWZhdWx0T3B0aW9ucygpO1xyXG5leHBvcnRzLmRlZmF1bHQgPSBEaWFsb2c7XHJcbiJdfQ==